#!/usr/bin/env node

/*!
 * This file implements `npm install <repository>` from a specific directory.
 * @file install
 */

/* globals Promise */

'use strict';

var child_process = require( 'child_process' );
var promisify     = require( 'util' ).promisify;
var sep           = require( 'path' ).sep;
var fs            = require( 'fs' );
var access = promisify( fs.access );
var mkdir  = promisify( fs.mkdir );
var exec   = promisify( child_process.exec );
var string = process.argv[ process.argv.length - 1 ];
var match  = /^(.+)\/(.+)#([^/]+)\/(.+)$/.exec( string );

if ( ! match ) {
  console.log( [
    '  Input is invalid: "' + string + '"',
    '  Valid example:    "silent-tempest/router#master/packages/body_parser"'
  ].join( '\n' ) );
  process.exit( 1 );
}

make( [ '.temp', match[ 2 ] ] )
  .then( function ( exists )
  {
    if ( exists === false ) {
      return exec( [
        'cd .temp/' + match[ 2 ],
        'git init',
        'git remote add -t ' + match[ 3 ] + ' -f origin https://github.com/' + match[ 1 ] + '/' + match[ 2 ] + '.git',
        'git pull origin ' + match[ 3 ]
      ].join( '\n' ) );
    }
  } )
  .then( handleExec )
  .then( function ()
  {
    var folder   = './.temp/' + match[ 2 ] + '/' + match[ 4 ];
    var _package = require( folder + '/package.json' );
    var pack     = _package.name + '-' + _package.version + '.tgz';

    return access( pack, fs.F_OK )
      .then( function ( error )
      {
        if ( error ) {
          if ( error.code !== 'ENOENT' ) {
            throw error;
          }

          return exec( 'npm pack ' + folder );
        }
      } )
      .then( handleExec )
      .then( function ()
      {
        return exec( 'npm i ' + pack );
      } );
  } )
  [ 'catch' ]( function ( error )
  {
    console.log( error );
    process.exit( 1 );
  } );

/**
 * Эта функция рекурсивно и асинхронно создает путь `path`.
 * @private
 * @method make
 * @param  {Array.<string>}     path
 * @param  {number}             [_index=1]
 * @param  {boolean}            [_exists]
 * @return {Promise.<boolean?>}            Значение Promise будет `false` когда `path` не существовал раньше.
 */
function make ( path, _index, _exists )
{
  var currentPath;

  if ( ! _index ) {
    _index = 1;
  }

  if ( _index > path.length ) {
    return Promise.resolve( _exists );
  }

  return access( ( currentPath = path.slice( 0, _index ).join( sep ) ), fs.F_OK )
    [ 'catch' ]( function ( error )
    {
      _exists = false;

      if ( error.code !== 'ENOENT' ) {
        throw error;
      }

      return mkdir( currentPath );
    } )
    .then( function ()
    {
      return make( path, _index + 1, _exists );
    } );
}

/**
 * @private
 * @method handleExec
 * @param  {object} object
 * @param  {string} object.stdout
 * @param  {string} object.stderr
 * @return {void}
 */
function handleExec ( object )
{
  if ( object ) {
    console.log( object );
  }
}
